{"version":3,"sources":["Container.js","Footer.js","client.js","forms/AddStudentForm.js","forms/EditStudentForm.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","style","width","margin","textAlign","children","Footer","className","src_Container","undefined","numberOfStudents","avatar","backgroundColor","marginRight","size","es_button","onClick","handleAddStudentClickEvent","type","checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","updateStudent","studentId","student","concat","headers","Content-Type","method","body","JSON","stringify","deleteStudent","inputBottomMargin","marginBottom","tagStyle","Object","objectSpread","color","AddStudentForm","formik_esm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","_ref","setSubmitting","addNewStudent","onSuccess","catch","err","onFailure","finally","_ref2","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","input","name","onChange","onBlur","value","placeholder","tag","disabled","EditUserForm","_this$props","this","submitter","console","log","Component","openNotification","message","description","notification","errorNotification","App","state","students","isFetching","selectedStudent","isAddStudentModalVisisble","isEditStudentModalVisible","openAddStudentModal","_this","setState","closeAddStudentModal","openEditStudentModal","closeEditStudentModal","openNotificationWithIcon","fetchStudents","res","editUser","updateStudentFormSubmitter","status","_this2","_this$state","commonElements","modal","title","visible","onOk","onCancel","forms_AddStudentForm","httpStatus","page_header","EditStudentForm_EditUserForm","src_Footer_0","length","spin","indicator","icon","fontSize","columns","key","render","text","charAt","toUpperCase","dataIndex","record","react","popconfirm","placement","onConfirm","okText","cancelText","stopPropagation","marginLeft","table","dataSource","pagination","rowKey","empty","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db4b7af5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Container = props => (\n    <div style={{width: '1400px', margin: '0 auto', textAlign: 'center'}}>\n        {props.children}\n    </div>\n);\n\nexport default Container;","import React from 'react';\nimport Container from './Container';\nimport { Button, Avatar } from 'antd';\nimport './Footer.css';\n\nconst Footer = (props) => (\n    <div className='footer'>\n        <Container>\n            {props.numberOfStudents !== undefined ?\n                <Avatar \n                    style={{backgroundColor: '#f56a00', marginRight: '5px'}}\n                    size='large'>{props.numberOfStudents}</Avatar> : null\n            }\n            <Button onClick={() => props.handleAddStudentClickEvent()} type='primary'>Add new student +</Button>\n        </Container>\n    </div>\n);\n\nexport default Footer;","import fetch from 'unfetch';\n\nconst checkStatus = response => {\n    if (response.ok) {\n        return response;\n    } else {\n        let error = new Error(response.statusText);\n        error.response = response;\n        response.json().then(e => {\n            error.error = e;\n        });\n        return Promise.reject(error);\n    }\n}\n\nexport const getAllStudents = () => \n    fetch('api/students').then(checkStatus);\n\nexport const addNewStudent = student =>\n    fetch('api/students', {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(student)\n    })\n    .then(checkStatus);\n\nexport const updateStudent = (studentId, student) => \n    fetch(`api/students/${studentId}`, {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'PUT',\n        body: JSON.stringify(student)\n    })\n    .then(checkStatus);\n\nexport const deleteStudent = studentId =>\n    fetch(`api/students/${studentId}`, {\n        method: 'DELETE'\n    })\n    .then(checkStatus);\n\n","import React from 'react';\nimport { Formik } from 'formik';\nimport { Input, Button, Tag } from 'antd';\nimport { addNewStudent } from '../client';\n\nconst inputBottomMargin = {marginBottom: '10px'};\nconst tagStyle = {backgroundColor: '#f50', color: 'white', ...inputBottomMargin};\n\nconst AddStudentForm = (props) => (\n    <Formik\n        initialValues={{ firstName: '', lastName: '', email: '', gender: ''}}\n        validate={values => {\n            let errors = {};\n\n            if (!values.firstName) {\n                errors.firstName = 'First Name Required'\n            }\n\n            if (!values.lastName) {\n                errors.lastName = 'Last Name Required'\n            }\n\n            if (!values.email) {\n                errors.email = 'Email Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n\n            if (!values.gender) {\n                errors.gender = 'Gender Required';\n            } else if (!['MALE', 'male', 'FEMALE', 'female'].includes(values.gender)) {\n                errors.gender = 'Gender must be (MALE, male, FEMALE, female)';\n            }\n            \n            return errors;\n        }}\n        onSubmit={(student, { setSubmitting }) => {\n            addNewStudent(student).then(() => {\n                props.onSuccess();\n            })\n            .catch(err => {\n                props.onFailure(err);\n            })\n            .finally(() => {\n                setSubmitting(false);\n            })\n        }}>\n    {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        submitForm,\n        isValid\n        /* and other goodies */\n    }) => (\n        <form onSubmit={handleSubmit}>\n            <Input\n                style={inputBottomMargin}\n                name=\"firstName\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.firstName}\n                placeholder='First name. E.g John'\n            />\n            {errors.firstName && touched.firstName &&\n                    <Tag style={tagStyle}>{errors.firstName}</Tag>}\n            <Input\n                style={inputBottomMargin}\n                name=\"lastName\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.lastName}\n                placeholder='Last name. E.g Jones'\n            />\n            {errors.lastName && touched.lastName && \n                <Tag style={tagStyle}>{errors.lastName}</Tag>}\n            <Input\n                style={inputBottomMargin}\n                name=\"email\"\n                type='email'\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.email}\n                placeholder='Email. E.g example@gmail.com'\n            />\n            {errors.email && touched.email && \n                <Tag style={tagStyle}>{errors.email}</Tag>}\n            <Input\n                style={inputBottomMargin}\n                name=\"gender\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.gender}\n                placeholder='Gender. E.g Male or Female'\n            />\n            {errors.gender && touched.gender && \n                <Tag style={tagStyle}>{errors.gender}</Tag>}\n            <Button \n                onClick={() => submitForm()} \n                type=\"submit\" \n                disabled={isSubmitting | (touched && !isValid)}>\n                Submit\n            </Button>\n        </form>\n    )}\n    </Formik>\n);\n\n\nexport default AddStudentForm;","import React,  {Component} from 'react';\nimport { Formik } from 'formik';\nimport { Input, Tag, Button } from 'antd';\n\nexport default class EditUserForm extends Component {   \n    render () {\n        const { submitter, initialValues } = this.props;\n        return (\n          <Formik\n          initialValues={initialValues}\n          validate={values => {\n            let errors = {};\n            if (!values.email) {\n              errors.email = 'Required';\n            } else if (\n              !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n            ) {\n              errors.email = 'Invalid email address';\n            }\n            if (!values.firstName) {\n              errors.firstName = 'First name required';\n            }\n            if (!values.lastName) {\n              errors.lastName = 'Last name required';\n            }\n            return errors;\n          }}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(values)\n            submitter(values);\n            setSubmitting(false);\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            isValid,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n            submitForm\n            /* and other goodies */\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <Input\n                style={{marginBottom: '5px'}}\n                name=\"firstName\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.firstName}\n              />\n              {errors.firstName && touched.firstName && <Tag style={{marginBottom: '5px'}} color=\"#f50\">{errors.firstName}</Tag>}\n\n              <Input\n                style={{marginBottom: '5px'}}\n                name=\"lastName\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.lastName}\n              />\n              {errors.lastName && touched.lastName && <Tag style={{marginBottom: '5px'}} color=\"#f50\">{errors.lastName}</Tag>}\n\n              <Input\n                style={{marginBottom: '5px'}}\n                type=\"email\"\n                name=\"email\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.email}\n              />\n              {errors.email && touched.email && <Tag style={{marginBottom: '5px'}} color=\"#f50\">{errors.email}</Tag>}\n\n              <Button onClick = {() => submitForm()} type=\"submit\" disabled={isSubmitting | (touched && !isValid) }>\n                Submit\n              </Button>\n            </form>\n          )}\n        </Formik>\n      )\n    }\n}","import { notification } from 'antd';\n\nconst openNotification = (type, message, description) => {\n    notification[type]({\n      message,\n      description\n    });\n  };\n\nexport const successNotification = (message, description) => \n  openNotification('sucess', message, description);\n\nexport const infosNotification = (message, description) => \n  openNotification('info', message, description);\n\nexport const warningNotification = (message, description) => \n  openNotification('warning', message, description);\n\nexport const errorNotification = (message, description) => \n  openNotification('error', message, description);\n","import React, { Component, Fragment } from 'react';\nimport Container from './Container';\nimport Footer from './Footer';\nimport './App.css';\nimport {\n   getAllStudents,\n   updateStudent,\n   deleteStudent\n} from './client';\nimport AddStudentForm from './forms/AddStudentForm';\nimport EditStudentForm from './forms/EditStudentForm';\nimport { errorNotification } from './Notification';\nimport {\n  Table,\n  Avatar,\n  Spin,\n  Icon,\n  Modal,\n  Empty,\n  PageHeader,\n  Button,\n  notification, \n  Popconfirm\n} from 'antd';\n\nconst getIndicatorIcon = () => <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\n\nclass App extends Component {\n\n  state = {\n    students: [],\n    isFetching: false,\n    selectedStudent: {},\n    isAddStudentModalVisisble: false,\n    isEditStudentModalVisible: false,\n  }\n\n  componentDidMount () {\n    this.fetchStudents();\n  }\n\n  openAddStudentModal = () => this.setState({isAddStudentModalVisisble: true})\n\n  closeAddStudentModal = () => this.setState({isAddStudentModalVisisble: false})\n\n  openEditStudentModal = () => this.setState({ isEditStudentModalVisible: true })\n  \n  closeEditStudentModal = () => this.setState({ isEditStudentModalVisible: false })\n\n  openNotificationWithIcon = (type, message, description) => notification[type]({message, description});\n\n  fetchStudents = () => {\n    this.setState({\n      isFetching: true\n    });\n    getAllStudents()\n      .then(res => res.json()\n      .then(students => {\n        console.log(students);\n        this.setState({\n          students,\n          isFetching: false\n        });\n      }))\n      .catch(error => {\n        console.log(error.error);\n        const message = error.error.message;\n        const description = error.error.error;\n        errorNotification(message, description);\n        this.setState({\n          isFetching: false\n        });\n      });\n  }\n\n  editUser = selectedStudent => {\n    this.setState({ selectedStudent });\n    this.openEditStudentModal();\n  }\n\n  updateStudentFormSubmitter = student => {\n    updateStudent(student.studentId, student).then(() => {\n      this.openNotificationWithIcon('success', 'Student updated', `${student.studentId} was updated`);\n      this.closeEditStudentModal();\n      this.fetchStudents();\n    }).catch(err => {\n      console.error(err.error);\n      this.openNotificationWithIcon('error', 'error', `(${err.error.status}) ${err.error.error}`);\n    });\n  }\n\n  deleteStudent = studentId => {\n    deleteStudent(studentId).then(() => {\n      this.openNotificationWithIcon('success', 'Student deleted', `${studentId} was deleted`);\n      this.fetchStudents();\n    }).catch(err => {\n      this.openNotificationWithIcon('error', 'error', `(${err.error.status}) ${err.error.error}`);\n    });\n  }\n\n  render() {\n\n    const { students, isFetching, isAddStudentModalVisisble } = this.state;\n\n    const commonElements = () => (\n      <div>\n        <Modal\n          title='Add new student'\n          visible={isAddStudentModalVisisble}\n          onOk={this.closeAddStudentModal}\n          onCancel={this.closeAddStudentModal}\n          width={1000}>\n          <AddStudentForm \n            onSuccess={() => {\n              this.closeAddStudentModal(); \n              this.fetchStudents();\n            }}\n            onFailure={(error) => {\n              const message = error.error.message;\n              const description = error.error.httpStatus;\n              errorNotification(message, description);\n            }}\n          />\n        </Modal>\n\n        <Modal\n          title='Edit'\n          visible={this.state.isEditStudentModalVisible}\n          onOk={this.closeEditStudentModal}\n          onCancel={this.closeEditStudentModal}\n          width={1000}>\n          \n          <PageHeader title={`${this.state.selectedStudent.studentId}`}/>\n          \n          <EditStudentForm \n            initialValues={this.state.selectedStudent} \n            submitter={this.updateStudentFormSubmitter}/>\n        </Modal>\n\n        <Footer\n          numberOfStudents={students.length}\n          handleAddStudentClickEvent={this.openAddStudentModal}\n        />  \n      </div>\n    )\n\n    if (isFetching) {\n      return (\n        <Container>\n          <Spin indicator={getIndicatorIcon()}/>\n        </Container>\n      );\n    }\n\n    if (students && students.length) {\n      const columns = [\n        {\n          title: '',\n          key: 'avatar',\n          render: (text, student) => (\n            <Avatar size='large'>\n              {`${student.firstName.charAt(0).toUpperCase()}${student.lastName.charAt(0).toUpperCase()}`}\n            </Avatar>\n          )\n        },\n        {\n          title: 'Student Id',\n          dataIndex: 'studentId',\n          key: 'studentId'\n        },\n        {\n          title: 'First Name',\n          dataIndex: 'firstName',\n          key: 'firstName'\n        },\n        {\n          title: 'Last Name',\n          dataIndex: 'lastName',\n          key: 'lastName'\n        },\n        {\n          title: 'Email',\n          dataIndex: 'email',\n          key: 'email'\n        },\n        {\n          title: 'Gender',\n          dataIndex: 'gender',\n          key: 'gender'\n        },\n        {\n          title: 'Action',\n          key: 'action',\n          render: (text, record) => (\n            <Fragment>\n              <Popconfirm\n                placement='topRight'\n                title={`Are you sure to delete ${record.studentId}`} \n                onConfirm={() => this.deleteStudent(record.studentId)} okText='Yes' cancelText='No'\n                onCancel={e => e.stopPropagation()}>\n                <Button type='danger' onClick={(e) => e.stopPropagation()}>Delete</Button>\n              </Popconfirm>\n              <Button style={{marginLeft: '5px'}} type='primary' onClick={() => this.editUser(record)}>Edit</Button>\n            </Fragment>\n          ),\n        }\n      ];\n\n      return (\n        <Container>\n          <Table \n            style={{marginBottom: '100px'}}\n            dataSource={students} \n            columns={columns} \n            pagination={false}\n            rowKey='studentId'/>\n          {commonElements()}\n        </Container>\n      );\n\n    }\n\n    return (\n      <Container>\n        <Empty description={\n          <h1>No Students found</h1>\n        }/>\n        {commonElements()}\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}